<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>折腾记录 on シャロン</title><link>https://sheronw.xyz/tags/%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/</link><description>Recent content in 折腾记录 on シャロン</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Mon, 04 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://sheronw.xyz/tags/%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/index.xml" rel="self" type="application/rss+xml"/><item><title>Assign a Subdomain to Elastic Beanstalk and Enable HTTPS</title><link>https://sheronw.xyz/posts/2021-01-04-subdomain-https-for-eb/</link><pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate><guid>https://sheronw.xyz/posts/2021-01-04-subdomain-https-for-eb/</guid><description>To enable HTTPS (easily), make sure you created one Elastic Beanstalk environment with Load Balancer option.
Create Hosted Zone find Route 53 in AWS console choose hosted zones on the left click create hosted zone write your subdomain.example.com as domain name, choose public hosted zone and then click create hosted zone Edit TTL (optional for testing) find the NS record in this hosted zone, select and click edit change TTL to some value like 900 (15 min), by default the value is 172800 (2 days) Add Alias Resource Record click create record in this hosted zone just leave blank for record name enable alias and assign route traffic to as your elastic beanstalk application click create Add NS Records for the Subdomain go to your domain provider and find the place to add records, for example, in Google Domains, go to DNS and find custom resource records section copy and paste the NS record in the hosted zone that you created just now, for example, in Google Domains, name should be subdomain (some providers use subdomain.</description></item><item><title>IMGUI 中文支持方案</title><link>https://sheronw.xyz/posts/2020-07-01-imgui-chinese/</link><pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate><guid>https://sheronw.xyz/posts/2020-07-01-imgui-chinese/</guid><description>没学过 c++，单纯想头铁汉化个东西，就查资料折腾了一下，这里做一个小的总结。如果有更好的方案请指正。
加载字体 首先需要加载支持中文的字体。 网上最多的解决方案是读取外部的.ttf/.otf字体，亲测可用。但需要用户的目录读取权限，而且可能出现字体不存在的情况。
对于源码内嵌字体，IMGUI 的作者其实也给出了一个解决方案：将 binary 转换为 C array 的工具。如果软件只是使用拉丁字集的话，文件不大应该也没什么问题，我打算汉化的软件本身用的也是这个解决方案，但将中文字集转换为 C Array 的话大小至少是西文字集的几千倍吧。
ImGuiIO&amp;amp; io = ImGui::GetIO(); IMFont* ttf_font = io.Fonts-&amp;gt;AddFontFromFileTTF(&amp;#34;res/simhei.ttf&amp;#34;, 16.0f, Null, io.Fonts-&amp;gt;GetGlyphRangesChinese()); IMFont* compressed_font = io.Fonts-&amp;gt;AddFontFromMemoryCompressedTTF(SimHei_compressed_data,SimHei_compressed_size, 16.f, Null, io.Fonts-&amp;gt;GetGlyphRangesChinese()); 这里解释一下，GetGlyphRangesChinese() 用来指定加载字符集，我需要改动的软件基于 IMGUI 1.4，所以只有这个方法，在更新的版本中，这个被加载常用汉字的GetGlyphRangesChineseSimplifiedCommon()和加载所有汉字的GetGlyphRangesChineseFull()所取代。
汉字编码 如果是 c++11，直接给中文字符串添加u8前缀就可以了，源代码本身应该也是UTF-8。之前的版本可以上网找个转换函数复制下来用。
调整 OverSampling 配置 参考 Github 上的这个 Issue。之前提到过中文字集特别占内存，而 IMGUI 的字体基于 FontAlas，至少在我这个版本（1.4）中不能动态加载，所以可能编译跑起来之后发现满屏黑白方块。
在作者提供的解决办法中，其中看起来最简单粗暴的方法是减少 OverSampling。
ImFontConfig config_words; config_words.OversampleV = 1; config_words.OversampleH = 1; // 默认为3 font_14 = io.Fonts-&amp;gt;AddFontFromMemoryCompressedTTF(SimHei_compressed_data,SimHei_compressed_size, 16.f, &amp;amp;config_words, io.Fonts-&amp;gt;GetGlyphRangesChinese()); 除此之外还可以请求 Alpha Texture （超出我能力范围了 QvQ）或者手动缩小glyphRange，只保留自己用到的字符。</description></item><item><title>利用 IFTTT 将 Toggl Report 发送到 Telegram Channel</title><link>https://sheronw.xyz/posts/2020-04-13-ifttt_toggl_telegram/</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate><guid>https://sheronw.xyz/posts/2020-04-13-ifttt_toggl_telegram/</guid><description>【2020.11.5 更新】趣闻一则：因为 star 了 Toggl API，被一个英国的独立开发者发了 cold email，于是就花了十分钟在 zoom 上和他聊了聊，老哥似乎是想做一个使用类似 Toggl 这样的工具收集数据，然后用机器学习分析码农生产力的产品。
【2020.9.25 更新】现在 IFTTT 开始付费，感觉不值，散了吧散了吧（虽然 Toggl Report 的获取依然可以参考）。
主要思路 生写一个 Telegram Bot 也不是不行但我就是想找借口玩 IFTTT
VPS 或树莓派：写一个自动化的程序并定时运行，从 Toggl Report API 获取数据，整理之后 Post 给 IFTTT 的 Webhook。
IFTTT：if 收到服务器端的 Post then 发消息到 Telegram 指定 chat
Telegram：利用@IFTTT实现 IFTTT 与 Telegram 的联动
本记录使用的是目前的 Toggl API v8 以及 Toggl Report API v2。
获取 Toggl API Token 及 Workspace ID 登录 Toggl 网页版，进入Profile Settings页面翻到下面有自己的api_token，把这玩意儿记下来待会儿用。切换到自己想要获取 Report 的 Workspace，点 Settings，把地址栏中https://toggl.</description></item></channel></rss>